services:
- docker

# Build worker image (VM template)
environment:
  matrix:

  - DOCKER_IMAGE: ubuntu:16.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: xenial
    PACKAGE_TYPE: deb
    WITH_CSHARP: ON

  - DOCKER_IMAGE: ubuntu:18.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: bionic
    PACKAGE_TYPE: deb
    WITH_CSHARP: ON

  - DOCKER_IMAGE: ubuntu:20.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: focal
    PACKAGE_TYPE: deb
    WITH_CSHARP: ON

  - DOCKER_IMAGE: centos:6
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 6
    PACKAGE_TYPE: rpm
    WITH_CSHARP: OFF

  - DOCKER_IMAGE: centos:7
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 7
    PACKAGE_TYPE: rpm
    WITH_CSHARP: ON

  - DOCKER_IMAGE: centos:8
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 8
    PACKAGE_TYPE: rpm
    WITH_CSHARP: ON

  - DOCKER_IMAGE: fedora:30
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 30
    PACKAGE_TYPE: rpm
    WITH_CSHARP: ON

  - DOCKER_IMAGE: fedora:31
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 31
    PACKAGE_TYPE: rpm
    WITH_CSHARP: ON

  - DOCKER_IMAGE: fedora:32
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 32
    PACKAGE_TYPE: rpm
    WITH_CSHARP: ON

  - GENERATOR: Visual Studio 15 2017
    PLATFORM: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files (x86)\Java\jdk1.8.0

  - GENERATOR: Visual Studio 15 2017 Win64
    PLATFORM: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files\Java\jdk1.8.0

before_build:
- cmd: set /p VERSION=<VERSION
- sh: export ARTIFACT_TYPE=dev
- sh: if [ ! "$ARTIFACT_TYPE" = "release" ]; then export CLOUDSMITH_UPLOAD_FLAGS=--republish; fi
- cmd: set OPENMAMA_INSTALL_DIR=%APPVEYOR_BUILD_FOLDER%\openmama-%VERSION%.win.%PLATFORM%
- cmd: vcpkg install qpid-proton:%PLATFORM%-windows libevent:%PLATFORM%-windows apr:%PLATFORM%-windows gtest:%PLATFORM%-windows

# Build chain tooling
install:
- cmd: choco install -y unzip gow wget gradle nunit-console-runner nunit-extension-nunit-v2-driver
- cmd: refreshenv
- cmd: set PATH=C:\ProgramData\chocolatey\bin;%PATH%
- cmd: |-
    cd "C:\Tools\vcpkg"
    git pull
    git checkout 563ab882e1fdb45a851b03d56f4c8d18cf00d7ec
    .\bootstrap-vcpkg.bat
    cd %appveyor_build_folder%
- sh: sudo apt-get update -qq
- sh: sudo apt-get install -y docker python
- sh: sudo pip install --upgrade cloudsmith-cli

build_script:
  # Windows build
- cmd: set PATH=%JAVA_HOME_OVERRIDE%\bin;%PATH%
- cmd: |-
    cd %APPVEYOR_BUILD_FOLDER%
    mkdir build
    cd build
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_CSHARP=ON -DWITH_UNITTEST=ON -DWITH_JAVA=ON -DPROTON_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ -DGTEST_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ -DINSTALL_RUNTIME_DEPENDENCIES=ON -DCMAKE_INSTALL_PREFIX="%OPENMAMA_INSTALL_DIR%" -G "%GENERATOR%" -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DAPR_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ ..
    cmake --build . --config RelWithDebInfo --target install
    cd ..
    python release_scripts\ci-run.py
    7z a openmama-%VERSION%.win.%PLATFORM%.zip "%OPENMAMA_INSTALL_DIR%"

  # Linux build
- sh: docker build -t omdocker -f release_scripts/Dockerfile . --build-arg IMAGE=$DOCKER_IMAGE --build-arg WITH_CSHARP=$WITH_CSHARP --build-arg INSTALL_RUNTIME_DEPENDENCIES=$INSTALL_RUNTIME_DEPENDENCIES
- sh: docker run -e ARTIFACT_TYPE=$ARTIFACT_TYPE -e BUILD_NUMBER=$APPVEYOR_BUILD_NUMBER -v $(pwd):/apps/release --rm omdocker
  # Verify the packages are installable
- sh: if [ "$PACKAGE_TYPE" = deb ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "apt update && apt install -y /package/*.deb"; fi
- sh: if [ "$DISTRO" = fedora ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "dnf install -y /package/*.rpm"; fi
- sh: if [ "$DISTRO" = el ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "yum install -y epel-release && yum install -y /package/*.rpm"; fi
  # Upload to cloudsmith
- sh: if [ -n "$CLOUDSMITH_REPO" ]; then echo cloudsmith push $PACKAGE_TYPE $CLOUDSMITH_UPLOAD_FLAGS $CLOUDSMITH_REPO/$DISTRO/$DISTRO_VERSION *.$PACKAGE_TYPE; fi
- sh: ls *.$PACKAGE_TYPE
- sh: if [ -n "$CLOUDSMITH_REPO" ]; then cloudsmith push $PACKAGE_TYPE $CLOUDSMITH_UPLOAD_FLAGS $CLOUDSMITH_REPO/$DISTRO/$DISTRO_VERSION *.$PACKAGE_TYPE; fi

artifacts:
  - path: '*.deb'
    name: OpenMAMA Ubuntu Package
  - path: '*.rpm'
    name: OpenMAMA RPM Package
  - path: '*.zip'
    name: OpenMAMA Windows Release

test: off

for:
-
  branches:
    only:
      - /OpenMAMA-\d*\.\d*\.\d*[\d.]*-release$/
  environment:
    CLOUDSMITH_REPO: openmama/openmama
    ARTIFACT_TYPE: release
-
  branches:
    only:
      - next
  environment:
    CLOUDSMITH_REPO: openmama/openmama-experimental
    ARTIFACT_TYPE: dev
-
  branches:
    only:
      - /OpenMAMA-\d*\.\d*\.\d*[\d.]*$/
  environment:
    CLOUDSMITH_REPO: openmama/openmama-rc
    ARTIFACT_TYPE: rc

